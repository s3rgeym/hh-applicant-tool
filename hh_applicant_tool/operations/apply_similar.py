import argparse
import logging
import random
import time
from collections import defaultdict
from datetime import datetime, timedelta, timezone
from typing import Any, TextIO

from ..ai.blackbox import BlackboxChat, BlackboxError
from ..api import ApiClient, ApiError
from ..api.errors import LimitExceeded
from ..main import BaseOperation
from ..main import Namespace as BaseNamespace
from ..mixins import GetResumeIdMixin
from ..telemetry_client import TelemetryClient, TelemetryError
from ..types import ApiListResponse, VacancyItem
from ..utils import (
    fix_datetime,
    parse_interval,
    parse_invalid_datetime,
    random_text,
    truncate_string,
)

logger = logging.getLogger(__package__)


class Namespace(BaseNamespace):
    resume_id: str | None
    message_list: TextIO
    force_message: bool
    use_ai: bool
    pre_prompt: str
    apply_interval: tuple[float, float]
    page_interval: tuple[float, float]
    order_by: str
    search: str
    schedule: str
    dry_run: bool
    # –ü–æ—à–ª–∏ –¥–æ–ø —Ñ–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ
    experience: str
    employment: list[str] | None
    area: list[str] | None
    metro: list[str] | None
    professional_role: list[str] | None
    industry: list[str] | None
    employer_id: list[str] | None
    excluded_employer_id: list[str] | None
    currency: str | None
    salary: int | None
    only_with_salary: bool
    label: list[str] | None
    period: int | None
    date_from: str | None
    date_to: str | None
    top_lat: float | None
    bottom_lat: float | None
    left_lng: float | None
    right_lng: float | None
    sort_point_lat: float | None
    sort_point_lng: float | None
    no_magic: bool
    premium: bool
    responses_count_enabled: bool


def _bool(v: bool) -> str:
    return str(v).lower()


def _join_list(items: list[Any] | None) -> str:
    return ",".join(f"{v}" for v in items) if items else ""


class Operation(BaseOperation, GetResumeIdMixin):
    """–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.

    –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: <https://api.hh.ru/openapi/redoc#tag/Poisk-vakansij-dlya-soiskatelya/operation/get-vacancies-similar-to-resume>
    """

    def setup_parser(self, parser: argparse.ArgumentParser) -> None:
        parser.add_argument("--resume-id", help="–ò–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—é–º–µ")
        parser.add_argument(
            "-L",
            "--message-list",
            help="–ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏. –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.",
            type=argparse.FileType("r", encoding="utf-8", errors="replace"),
        )
        parser.add_argument(
            "-f",
            "--force-message",
            "--force",
            help="–í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ",
            default=False,
            action=argparse.BooleanOptionalAction,
        )
        parser.add_argument(
            "--use-ai",
            "--ai",
            help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π",
            default=False,
            action=argparse.BooleanOptionalAction,
        )
        parser.add_argument(
            "--pre-prompt",
            "--prompt",
            help="–î–æ–±–∞–≤–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞",
            default="–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–µ –±–æ–ª–µ–µ 5-7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –º–æ–µ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏",
        )
        parser.add_argument(
            "--apply-interval",
            help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (X, X-Y)",
            default="1-5",
            type=parse_interval,
        )
        parser.add_argument(
            "--page-interval",
            help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (X, X-Y)",
            default="1-3",
            type=parse_interval,
        )
        parser.add_argument(
            "--order-by",
            help="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π",
            choices=[
                "publication_time",
                "salary_desc",
                "salary_asc",
                "relevance",
                "distance",
            ],
            default="relevance",
        )
        parser.add_argument(
            "--search",
            help="–°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–º–æ—Å–∫–≤–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä 100500'",
            type=str,
            default=None,
        )

        parser.add_argument(
            "--schedule",
            help="–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞. –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: fullDay, shift, flexible, remote, flyInFlyOut –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–Ω—è, —Å–º–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞, –≥–∏–±–∫–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞, —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –≤–∞—Ö—Ç–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞",
            type=str,
            default=None,
        )
        parser.add_argument(
            "--dry-run",
            help="–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–∫–ª–∏–∫–∏, –∞ —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞",
            default=False,
            action=argparse.BooleanOptionalAction,
        )
        parser.add_argument(
            "--experience",
            help="–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã –≤ –≤–∞–∫–∞–Ω—Å–∏–∏. –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: noExperience, between1And3, between3And6, moreThan6",
            type=str,
            default=None,
        )
        parser.add_argument(
            "--employment", nargs="+", help="–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (employment)"
        )
        parser.add_argument("--area", nargs="+", help="–†–µ–≥–∏–æ–Ω (area id)")
        parser.add_argument("--metro", nargs="+", help="–°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ (metro id)")
        parser.add_argument("--professional-role", nargs="+", help="–ü—Ä–æ—Ñ. —Ä–æ–ª—å (id)")
        parser.add_argument("--industry", nargs="+", help="–ò–Ω–¥—É—Å—Ç—Ä–∏—è (industry id)")
        parser.add_argument("--employer-id", nargs="+", help="ID —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π")
        parser.add_argument(
            "--excluded-employer-id", nargs="+", help="–ò—Å–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π"
        )
        parser.add_argument("--currency", help="–ö–æ–¥ –≤–∞–ª—é—Ç—ã (RUR, USD, EUR)")
        parser.add_argument("--salary", type=int, help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")
        parser.add_argument(
            "--only-with-salary", default=False, action=argparse.BooleanOptionalAction
        )
        parser.add_argument("--label", nargs="+", help="–ú–µ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π (label)")
        parser.add_argument("--period", type=int, help="–ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –∑–∞ N –¥–Ω–µ–π")
        parser.add_argument("--date-from", help="–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å (YYYY-MM-DD)")
        parser.add_argument("--date-to", help="–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ (YYYY-MM-DD)")
        parser.add_argument("--top-lat", type=float, help="–ì–µ–æ: –≤–µ—Ä—Ö–Ω—è—è —à–∏—Ä–æ—Ç–∞")
        parser.add_argument("--bottom-lat", type=float, help="–ì–µ–æ: –Ω–∏–∂–Ω—è—è —à–∏—Ä–æ—Ç–∞")
        parser.add_argument("--left-lng", type=float, help="–ì–µ–æ: –ª–µ–≤–∞—è –¥–æ–ª–≥–æ—Ç–∞")
        parser.add_argument("--right-lng", type=float, help="–ì–µ–æ: –ø—Ä–∞–≤–∞—è –¥–æ–ª–≥–æ—Ç–∞")
        parser.add_argument(
            "--sort-point-lat",
            type=float,
            help="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ lat –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é",
        )
        parser.add_argument(
            "--sort-point-lng",
            type=float,
            help="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ lng –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é",
        )
        parser.add_argument(
            "--no-magic",
            default=False,
            action=argparse.BooleanOptionalAction,
            help="–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∞–∑–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞",
        )
        parser.add_argument(
            "--premium",
            default=False,
            action=argparse.BooleanOptionalAction,
            help="–¢–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º –≤–∞–∫–∞–Ω—Å–∏–∏",
        )
        parser.add_argument(
            "--responses-count-enabled",
            default=False,
            action=argparse.BooleanOptionalAction,
            help="–í–∫–ª—é—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤",
        )
        parser.add_argument(
            "--search-field", nargs="+", help="–ü–æ–ª—è –ø–æ–∏—Å–∫–∞ (name, company_name –∏ —Ç.–ø.)"
        )
        parser.add_argument(
            "--clusters",
            action=argparse.BooleanOptionalAction,
            help="–í–∫–ª—é—á–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None)",
        )
        # parser.add_argument("--describe-arguments", action=argparse.BooleanOptionalAction, help="–í–µ—Ä–Ω—É—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞")

    def run(
        self, args: Namespace, api_client: ApiClient, telemetry_client: TelemetryClient
    ) -> None:
        self.enable_telemetry = True
        if args.disable_telemetry:
            # print(
            #     "üëÅÔ∏è –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è—Ö –∏ –∏—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä."
            # )
            # if (
            #     input("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é (–¥/–ù)? ")
            #     .lower()
            #     .startswith(("–¥", "y"))
            # ):
            #     self.enable_telemetry = False
            #     logger.info("–¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            # else:
            #     logger.info("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –≤–∫–ª—é—á–µ–Ω–Ω–æ–π!")
            self.enable_telemetry = False

        self.api_client = api_client
        self.telemetry_client = telemetry_client
        self.resume_id = args.resume_id or self._get_resume_id()
        self.application_messages = self._get_application_messages(args.message_list)
        self.chat = None

        if config := args.config.get("blackbox"):
            self.chat = BlackboxChat(
                session_id=config["session_id"],
                chat_payload=config["chat_payload"],
                proxies=self.api_client.proxies or {},
            )

        self.pre_prompt = args.pre_prompt

        self.apply_min_interval, self.apply_max_interval = args.apply_interval
        self.page_min_interval, self.page_max_interval = args.page_interval

        self.force_message = args.force_message
        self.order_by = args.order_by
        self.search = args.search
        self.schedule = args.schedule
        self.dry_run = args.dry_run
        self.experience = args.experience
        self.search_field = args.search_field
        self.employment = args.employment
        self.area = args.area
        self.metro = args.metro
        self.professional_role = args.professional_role
        self.industry = args.industry
        self.employer_id = args.employer_id
        self.excluded_employer_id = args.excluded_employer_id
        self.currency = args.currency
        self.salary = args.salary
        self.only_with_salary = args.only_with_salary
        self.label = args.label
        self.period = args.period
        self.date_from = args.date_from
        self.date_to = args.date_to
        self.top_lat = args.top_lat
        self.bottom_lat = args.bottom_lat
        self.left_lng = args.left_lng
        self.right_lng = args.right_lng
        self.sort_point_lat = args.sort_point_lat
        self.sort_point_lng = args.sort_point_lng
        self.clusters = args.clusters
        # self.describe_arguments = args.describe_arguments
        self.no_magic = args.no_magic
        self.premium = args.premium
        self._apply_similar()

    def _get_application_messages(self, message_list: TextIO | None) -> list[str]:
        if message_list:
            application_messages = list(filter(None, map(str.strip, message_list)))
        else:
            application_messages = [
                "{–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞|–ú–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å} –≤–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è %(vacancy_name)s",
                "{–ü—Ä–æ—à—É —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å|–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å} {–º–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É|–º–æ–µ —Ä–µ–∑—é–º–µ} –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é %(vacancy_name)s",
            ]
        return application_messages

    def _apply_similar(self) -> None:
        telemetry_client = self.telemetry_client
        telemetry_data = defaultdict(dict)

        vacancies = self._get_vacancies()

        if self.enable_telemetry:
            for vacancy in vacancies:
                vacancy_id = vacancy["id"]
                telemetry_data["vacancies"][vacancy_id] = {
                    "name": vacancy.get("name"),
                    "type": vacancy.get("type", {}).get("id"),  # open/closed
                    "area": vacancy.get("area", {}).get("name"),  # –≥–æ—Ä–æ–¥
                    "salary": vacancy.get("salary"),  # from, to, currency, gross
                    "direct_url": vacancy.get("alternate_url"),  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
                    "created_at": fix_datetime(
                        vacancy.get("created_at")
                    ),  # –±—É–¥–µ–º –≤—ã—á–∏—Å–ª—è—Ç—å –≥–æ–≤–Ω–æ-–≤–∞–∫–∞–Ω—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ –ø–æ–ª–≥–æ–¥–∞ –≤–∏—Å—è—Ç
                    "published_at": fix_datetime(vacancy.get("published_at")),
                    "contacts": vacancy.get(
                        "contacts"
                    ),  # –ø–∏–∑–¥–æ—Ä–≤–∞–Ω–∫–∏ —Ç–∞–º —Ç–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç
                    # HH —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø–µ—Ä—Ñ–∏–∫—Ü–∏–æ–Ω–∏—Å—Ç–∞ ‚Äî –∫—É—Å–æ–∫ –≥–æ–≤–Ω–∞, –≥–¥–µ –∫—Ä–∏–≤—ã–µ
                    # —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã, —É –≤–∞–∫–∞–Ω—Å–∏–π –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è...
                    "employer_id": int(vacancy["employer"]["id"])
                    if "employer" in vacancy and "id" in vacancy["employer"]
                    else None,
                    # "relations": vacancy.get("relations", []),
                    # –û—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
                }

        me = self.api_client.get("/me")

        basic_message_placeholders = {
            "first_name": me.get("first_name", ""),
            "last_name": me.get("last_name", ""),
            "email": me.get("email", ""),
            "phone": me.get("phone", ""),
        }

        do_apply = True
        complained_employers = set()

        for vacancy in vacancies:
            try:
                message_placeholders = {
                    "vacancy_name": vacancy.get("name", ""),
                    "employer_name": vacancy.get("employer", {}).get("name", ""),
                    **basic_message_placeholders,
                }

                logger.debug(
                    "–í–∞–∫–∞–Ω—Å–∏—è %(vacancy_name)s –æ—Ç %(employer_name)s"
                    % message_placeholders
                )

                if vacancy.get("has_test"):
                    logger.debug(
                        "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é —Å —Ç–µ—Å—Ç–æ–º: %s",
                        vacancy["alternate_url"],
                    )
                    continue

                if vacancy.get("archived"):
                    logger.warning(
                        "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤ –∞—Ä—Ö–∏–≤–µ: %s",
                        vacancy["alternate_url"],
                    )
                    continue

                relations = vacancy.get("relations", [])
                employer_id = vacancy.get("employer", {}).get("id")

                if (
                    self.enable_telemetry
                    and employer_id
                    and employer_id not in telemetry_data["employers"]
                    and employer_id not in complained_employers
                    and (
                        not relations
                        or parse_invalid_datetime(vacancy["created_at"])
                        + timedelta(days=7)
                        > datetime.now(tz=timezone.utc)
                    )
                ):
                    employer = self.api_client.get(f"/employers/{employer_id}")

                    employer_data = {
                        "name": employer.get("name"),
                        "type": employer.get("type"),
                        "description": employer.get("description"),
                        "site_url": employer.get("site_url"),
                        "area": employer.get("area", {}).get("name"),  # –≥–æ—Ä–æ–¥
                    }
                    if "got_rejection" in relations:
                        print(
                            "üö® –í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–∫–∞–∑ –æ—Ç https://hh.ru/employer/%s"
                            % employer_id
                        )

                        complained_employers.add(employer_id)

                    elif do_apply:
                        telemetry_data["employers"][employer_id] = employer_data

                if not do_apply:
                    logger.debug(
                        "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–∫–ª–∏–∫–æ–≤, —Ç–∞–∫ –∫–∞–∫ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏."
                    )
                    break

                if relations:
                    logger.debug(
                        "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é —Å –æ—Ç–∫–ª–∏–∫–æ–º: %s",
                        vacancy["alternate_url"],
                    )
                    continue

                params = {
                    "resume_id": self.resume_id,
                    "vacancy_id": vacancy["id"],
                    "message": "",
                }

                if self.force_message or vacancy.get("response_letter_required"):
                    if self.chat:
                        try:
                            msg = self.pre_prompt + "\n\n"
                            msg += message_placeholders["vacancy_name"]
                            logger.debug(msg)
                            msg = self.chat.send_message(msg)
                        except BlackboxError as ex:
                            logger.error(ex)
                            continue
                    else:
                        msg = (
                            random_text(random.choice(self.application_messages))
                            % message_placeholders
                        )

                    logger.debug(msg)
                    params["message"] = msg

                if self.dry_run:
                    logger.info(
                        "Dry Run: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é %s —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: %s",
                        vacancy["alternate_url"],
                        params,
                    )
                    continue

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–∫–ª–∏–∫–∞
                interval = random.uniform(
                    self.apply_min_interval, self.apply_max_interval
                )
                time.sleep(interval)

                res = self.api_client.post("/negotiations", params)
                assert res == {}
                print(
                    "üì® –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–∫–ª–∏–∫",
                    vacancy["alternate_url"],
                    "(",
                    truncate_string(vacancy["name"]),
                    ")",
                )
            except LimitExceeded:
                print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
                do_apply = False
            except ApiError as ex:
                logger.error(ex)

        print("üìù –û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã!")

        if self.enable_telemetry:
            if self.dry_run:
                # –° --dry-run –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
                logger.info(
                    "Dry Run: –î–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: %r",
                    telemetry_data,
                )
                return

            try:
                response = telemetry_client.send_telemetry(
                    "/collect", dict(telemetry_data)
                )
                logger.debug(response)
            except TelemetryError as ex:
                logger.error(ex)

    def _get_search_params(self, page: int, per_page: int) -> dict:
        params = {
            "page": page,
            "per_page": per_page,
            "order_by": self.order_by,
        }

        if self.search:
            params["text"] = self.search
        if self.schedule:
            params["schedule"] = self.schedule
        if self.experience:
            params["experience"] = self.experience
        if self.currency:
            params["currency"] = self.currency
        if self.salary:
            params["salary"] = self.salary
        if self.period:
            params["period"] = self.period
        if self.date_from:
            params["date_from"] = self.date_from
        if self.date_to:
            params["date_to"] = self.date_to
        if self.top_lat:
            params["top_lat"] = self.top_lat
        if self.bottom_lat:
            params["bottom_lat"] = self.bottom_lat
        if self.left_lng:
            params["left_lng"] = self.left_lng
        if self.right_lng:
            params["right_lng"] = self.right_lng
        if self.sort_point_lat:
            params["sort_point_lat"] = self.sort_point_lat
        if self.sort_point_lng:
            params["sort_point_lng"] = self.sort_point_lng
        if self.search_field:
            params["search_field"] = _join_list(self.search_field)
        if self.employment:
            params["employment"] = _join_list(self.employment)
        if self.area:
            params["area"] = _join_list(self.area)
        if self.metro:
            params["metro"] = _join_list(self.metro)
        if self.professional_role:
            params["professional_role"] = _join_list(self.professional_role)
        if self.industry:
            params["industry"] = _join_list(self.industry)
        if self.employer_id:
            params["employer_id"] = _join_list(self.employer_id)
        if self.excluded_employer_id:
            params["excluded_employer_id"] = _join_list(self.excluded_employer_id)
        if self.label:
            params["label"] = _join_list(self.label)
        if self.only_with_salary is not None:
            params["only_with_salary"] = _bool(self.only_with_salary)
        if self.clusters is not None:
            params["clusters"] = _bool(self.clusters)
        if self.no_magic is not None:
            params["no_magic"] = _bool(self.no_magic)
        if self.premium is not None:
            params["premium"] = _bool(self.premium)
        if self.responses_count_enabled is not None:
            params["responses_count_enabled"] = _bool(self.responses_count_enabled)

        return params

    def _get_vacancies(self, per_page: int = 100) -> list[VacancyItem]:
        rv = []
        # API –æ—Ç–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ 2000 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for page in range(20):
            params = self._get_search_params(page, per_page)
            res: ApiListResponse = self.api_client.get(
                f"/resumes/{self.resume_id}/similar_vacancies", params
            )
            rv.extend(res["items"])
            if page >= res["pages"] - 1:
                break

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if page > 0:
                interval = random.uniform(
                    self.page_min_interval, self.page_max_interval
                )
                time.sleep(interval)

        return rv
